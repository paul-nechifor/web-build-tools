// Generated by CoffeeScript 1.7.1
var Build, browserifyPkg, coffeeify, exec, fs, nib, spawn, stylusPkg, uglifyJs, _ref;

fs = require('fs');

_ref = require('child_process'), exec = _ref.exec, spawn = _ref.spawn;

browserifyPkg = require('browserify');

coffeeify = require('coffeeify');

uglifyJs = require('uglify-js');

stylusPkg = require('stylus');

nib = require('nib');

Build = (function() {
  function Build(taskOrig, config, processOptions, actions) {
    this.taskOrig = taskOrig;
    this.config = config;
    this.processOptions = processOptions;
    this.actions = actions;
  }

  Build.prototype.run = function(names, cb) {
    var i, next;
    if (typeof names === 'string') {
      names = [names];
    }
    i = 0;
    next = (function(_this) {
      return function() {
        return _this.actions[names[i]](function() {
          i++;
          if (i >= names.length) {
            return typeof cb === "function" ? cb() : void 0;
          }
          return next();
        });
      };
    })(this);
    return next();
  };

  Build.prototype.task = function(action, desc, func) {
    return this.taskOrig(action, desc, (function(_this) {
      return function(options) {
        _this.processOptions(options);
        return func();
      };
    })(this));
  };

  Build.prototype.makePublic = function(actionDesc) {
    var action, desc, _results;
    _results = [];
    for (action in actionDesc) {
      desc = actionDesc[action];
      _results.push((function(_this) {
        return function(action) {
          return _this.task(action, desc, function() {
            return _this.run(action);
          });
        };
      })(this)(action));
    }
    return _results;
  };

  return Build;

})();

Build.sh = function(commands, cb) {
  return exec(commands, function(err, stdout, stderr) {
    if (err) {
      throw err;
    }
    process.stdout.write(stdout + stderr);
    return typeof cb === "function" ? cb() : void 0;
  });
};

Build.writeJson = function(file, json) {
  var text;
  text = JSON.stringify(json, null, '  ');
  return fs.writeFileSync(file, text);
};

Build.cmd = function(name, args, cb) {
  var p;
  p = spawn(name, args);
  p.stdout.on('data', function(data) {
    return process.stdout.write(data + '');
  });
  p.stderr.on('data', function(data) {
    return process.stderr.write(data + '');
  });
  return p.on('close', function() {
    return typeof cb === "function" ? cb() : void 0;
  });
};

Build.stylus = function(outFile, inFile, opts, cb) {
  var input, s;
  if (cb === void 0) {
    cb = opts;
    opts = {};
  }
  input = fs.readFileSync(inFile).toString();
  s = stylusPkg(input);
  s.set('compress', opts.debug);
  s.use(nib);
  return s.render(function(err, css) {
    if (err) {
      throw err;
    }
    fs.writeFileSync(outFile, css);
    return typeof cb === "function" ? cb() : void 0;
  });
};

Build.browserify = function(outFile, inFile, opts, cb) {
  var b;
  if (cb === void 0) {
    cb = opts;
    opts = {};
  }
  b = browserifyPkg();
  b.add(inFile);
  b.transform(coffeeify);
  return b.bundle({
    debug: true,
    transform: coffeeify
  }, function(err, result) {
    var done;
    if (err) {
      throw err;
    }
    if (opts.debug) {
      done = uglifyJs.minify(result, {
        fromString: true
      });
      fs.writeFileSync(outFile, done.code);
    } else {
      fs.writeFileSync(outFile, result);
    }
    return typeof cb === "function" ? cb() : void 0;
  });
};

Build.commandify = function(jsFilePath, cb) {
  var file;
  file = fs.readFileSync(jsFilePath);
  fs.writeFileSync(jsFilePath, '#!/usr/bin/env node\n\n' + file);
  return Build.cmd('chmod', ['+x', jsFilePath], cb);
};

exports.Build = Build;
